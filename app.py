import streamlit as st
import openai
from langchain.chains.question_answering import load_qa_chain
from langchain_openai import OpenAIEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import FAISS
from langchain_openai import OpenAI
import pypdf
import os
from io import BytesIO
import docx  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå .docx
from pptx import Presentation  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå .pptx
import pandas as pd  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå .xlsx
from langchain.memory import ConversationBufferMemory
from pymongo import MongoClient
import uuid
from datetime import datetime, UTC

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ---
def get_text_from_file(file):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (PDF, TXT, DOCX, PPTX, XLSX, CSV)
    """
    text = ""
    file_extension = os.path.splitext(file.name)[1]
    if file_extension == ".pdf":
        try:
            pdf_reader = pypdf.PdfReader(file)
            for page in pdf_reader.pages:
                text += page.extract_text()
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF: {e}")
            return None
    elif file_extension == ".txt":
        text = file.getvalue().decode("utf-8")
    elif file_extension == ".docx":
        try:
            document = docx.Document(file)
            for para in document.paragraphs:
                text += para.text + "\n"
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå DOCX: {e}")
            return None
    elif file_extension == ".pptx":
        try:
            prs = Presentation(file)
            for slide in prs.slides:
                for shape in slide.shapes:
                    if hasattr(shape, "text"):
                        text += shape.text + "\n"
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå PPTX: {e}")
            return None
    elif file_extension == ".xlsx":
        try:
            xls = pd.ExcelFile(file)
            for sheet_name in xls.sheet_names:
                df = pd.read_excel(xls, sheet_name=sheet_name, header=0)
                # ‡πÅ‡∏õ‡∏•‡∏á DataFrame ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                text += f"--- Sheet: {sheet_name} ---\n"
                text += df.to_string(index=False) + "\n\n"
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå XLSX: {e}")
            return None
    elif file_extension == ".csv":
        try:
            df = pd.read_csv(file)
            text += df.to_string(index=False) + "\n"
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV: {e}")
            return None
    else:
        st.warning("‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF, TXT, DOCX, PPTX, XLSX ‡∏´‡∏£‡∏∑‡∏≠ CSV", icon="‚ö†Ô∏è")
        return None
    return text

def get_text_chunks(raw_text):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÜ ‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏¢‡πà‡∏≠‡∏¢ (chunks)
    """
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=1000,
        chunk_overlap=200,
        length_function=len
    )
    chunks = text_splitter.split_text(raw_text)
    return chunks

def get_vector_store(text_chunks, api_key):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á chunks ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô vector embeddings ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô FAISS vector store
    """
    try:
        embeddings = OpenAIEmbeddings(openai_api_key=api_key)
        vector_store = FAISS.from_texts(text_chunks, embedding=embeddings)
        return vector_store
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Vector Store: {e}")
        st.info("‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö OpenAI")
        return None

@st.cache_data(show_spinner=False)
def get_available_models(api_key):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏• GPT ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å OpenAI API
    """
    if not api_key or not api_key.startswith('sk-'):
        return []
    try:
        client = openai.OpenAI(api_key=api_key)
        models = client.models.list().data
        # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ 'gpt' ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏• instruct
        # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ gpt-4o ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        gpt_models = sorted(
            [model.id for model in models if 'gpt' in model.id and 'instruct' not in model.id],
            reverse=True
        )
        if 'gpt-4o' in gpt_models:
            gpt_models.remove('gpt-4o')
            gpt_models.insert(0, 'gpt-4o')
        return gpt_models
    except Exception as e:
        # ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î error (‡πÄ‡∏ä‡πà‡∏ô key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á) ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô list ‡∏ß‡πà‡∏≤‡∏á
        print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ: {e}")
        return []

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á UI ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Streamlit ---
st.set_page_config(page_title="Streamlit ChatGPT Clone", page_icon="ü§ñ", layout="wide")

st.title("ü§ñ Streamlit ChatGPT Clone", help=None)
st.caption("‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ")

# Add upload button in a container at top right
upload_col1, upload_col2 = st.columns([1, 20])
with upload_col1:
    if st.button("üìé", help="‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡∏≤‡∏°", use_container_width=True, key="top_upload_button"):
        st.session_state.show_upload_modal = True

# MongoDB connection
mongo_uri = st.secrets["MONGO_URI"]
mongo_client = MongoClient(mongo_uri)
chat_collection = mongo_client["chat_db"]["chat_logs"]

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô vector_store_map
if "vector_store_map" not in st.session_state:
    st.session_state.vector_store_map = {}

# --- Sidebar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ---
with st.sidebar:
    st.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
    
    # 1. ‡∏£‡∏±‡∏ö OpenAI API Key
    openai_api_key = st.text_input(
        "OpenAI API Key", 
        type="password",
        placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (sk-...)",
        help="‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤ API Key ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å https://platform.openai.com/account/api-keys"
    )

    # 2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• OpenAI (‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å)
    available_models = get_available_models(openai_api_key)
    default_model = "gpt-4.1-nano"
    if available_models:
        if default_model in available_models:
            default_index = available_models.index(default_model)
        else:
            default_index = 0
        selected_model = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•",
            available_models,
            index=default_index,
            help="‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ñ‡∏π‡∏Å‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ OpenAI ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
        )
    else:
        selected_model = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡πÉ‡∏™‡πà API Key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)",
            ("gpt-4.1-nano", "gpt-4o-mini", "gpt-4.1-mini"),
            index=0,
            help="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà API Key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
        )
    st.divider()

    st.info("‡πÅ‡∏≠‡∏õ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô 2 ‡πÇ‡∏´‡∏°‡∏î:\n1. **‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥:** ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ\n2. **‡πÇ‡∏´‡∏°‡∏î Deep Search:** ‡∏´‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å")

    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ chat folders ‡∏ï‡∏≤‡∏° user_id (‡∏Ñ‡∏∑‡∏≠ openai_api_key)
    chat_folder_collection = mongo_client["chat_db"]["chat_folder"]
    if openai_api_key and openai_api_key.startswith("sk-"):
        folder_doc = chat_folder_collection.find_one({"user_id": openai_api_key})
        folder_options = folder_doc.get("chat_folders", []) if folder_doc else []
        if folder_options:
            st.subheader("üìÇ ‡πÅ‡∏ä‡∏ó‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
            folder_names = [f["chat_name"] for f in folder_options]
            selected_folder_name = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ä‡∏ó", folder_names, key="select_existing_chat")
            selected_folder = next((f for f in folder_options if f["chat_name"] == selected_folder_name), None)
            
            if selected_folder:
                # ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ä‡∏ó‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å chat folder
                if st.session_state.get("chat_id") != selected_folder["chat_folder_id"]:
                    st.session_state.messages = []
                    st.session_state.chat_id = selected_folder["chat_folder_id"]
                    st.session_state.chat_name = selected_folder["chat_name"]
                    st.session_state.system_prompt = selected_folder.get("system_prompt", "")
                    logs = chat_collection.find_one({
                        "user_id": openai_api_key,
                        "chat_folder_id": selected_folder["chat_folder_id"]
                    })
                    if logs:
                        for log in logs.get("chats", []):
                            st.session_state.messages.append({"role": "user", "content": log["question"]})
                            st.session_state.messages.append({"role": "assistant", "content": log["answer"]})
                    st.rerun()

                # --- ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ä‡∏ó‡πÅ‡∏•‡∏∞ system prompt ---
                st.text_input("‚úèÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ä‡∏ó", value=selected_folder["chat_name"], key="edit_chat_name")
                st.text_area("üß† ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç System Prompt", value=selected_folder.get("system_prompt", ""), key="edit_system_prompt")

                if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á"):
                    new_name = st.session_state.get("edit_chat_name", "").strip()
                    new_prompt = st.session_state.get("edit_system_prompt", "").strip()
                    if not new_name:
                        st.warning("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ä‡∏ó‡∏´‡πâ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á")
                    else:
                        chat_folder_collection.update_one(
                            {
                                "user_id": openai_api_key,
                                "chat_folders.chat_folder_id": selected_folder["chat_folder_id"]
                            },
                            {
                                "$set": {
                                    "chat_folders.$.chat_name": new_name,
                                    "chat_folders.$.system_prompt": new_prompt,
                                    "chat_folders.$.last_update": datetime.now(UTC).isoformat()
                                }
                            }
                        )
                        st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                        st.rerun()

    # --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô sidebar ---
    st.subheader("üÜï ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà")
    if "creating_chat" not in st.session_state:
        st.session_state.creating_chat = False

    if st.button("‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà"):
        st.session_state.creating_chat = True

    if st.session_state.creating_chat:
        new_name = st.text_input("üìù ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà", key="new_chat_name_sidebar")
        new_prompt = st.text_area("üß† system prompt (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ)", key="new_system_prompt_sidebar", placeholder="‡∏Å‡∏≥‡∏´‡∏ô‡∏î personality ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...")
        if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà"):
            if not new_name.strip():
                st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ä‡∏ó‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", icon="‚úèÔ∏è")
            else:
                st.session_state.chat_id = str(uuid.uuid4())
                st.session_state.chat_name = new_name.strip()
                st.session_state.system_prompt = new_prompt.strip()
                st.session_state.messages = [{"role": "assistant", "content": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß"}]
                st.session_state.creating_chat = False
                st.session_state.vector_store_map = {}
                st.rerun()

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó ---
# --- ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏™‡∏î‡∏á chat input: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ chat_name ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ---
if "chat_name" in st.session_state and st.session_state.chat_name:
    if "chat_id" not in st.session_state:
        st.session_state.chat_id = str(uuid.uuid4())
    if "messages" not in st.session_state:
        st.session_state.messages = [{"role": "assistant", "content": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏™‡πà API Key ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢"}]

    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å (modal popup)
    if "show_upload_modal" not in st.session_state:
        st.session_state.show_upload_modal = False

    if st.session_state.show_upload_modal:
        st.markdown("### üìé ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå (Deep Search Mode)")
        uploaded_file_main = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå", type=["pdf", "txt", "docx", "pptx", "xlsx", "csv"], key="file_uploader_main")
        if uploaded_file_main is not None:
            if st.button("üîç ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå", key="process_main_file"):
                if not openai_api_key or not openai_api_key.startswith('sk-'):
                    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà OpenAI API Key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå", icon="üîë")
                else:
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå..."):
                        raw_text = get_text_from_file(uploaded_file_main)
                        if raw_text:
                            text_chunks = get_text_chunks(raw_text)
                            vector_store = get_vector_store(text_chunks, openai_api_key)
                            if vector_store:
                                st.session_state.vector_store_map[st.session_state.chat_id] = vector_store
                                st.success("‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß")
                                st.session_state.show_upload_modal = False
                            else:
                                st.session_state.vector_store_map.pop(st.session_state.chat_id, None)
                        else:
                            st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ")
                            st.session_state.vector_store_map.pop(st.session_state.chat_id, None)
        if st.button("‚ùå ‡∏õ‡∏¥‡∏î", key="close_upload_popup"):
            st.session_state.show_upload_modal = False

    # --- Chat input & attach button: moved to bottom ---
    prompt = st.chat_input("‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...")
    if prompt:
        if not openai_api_key or not openai_api_key.startswith('sk-'):
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà OpenAI API Key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô", icon="üîë")
        else:
            openai.api_key = openai_api_key
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)

            with st.chat_message("assistant"):
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î..."):
                    response = ""
                    chat_id = st.session_state.get("chat_id")
                    vector_store = st.session_state.vector_store_map.get(chat_id)
                    if vector_store is not None:
                        try:
                            docs = vector_store.similarity_search(query=prompt, k=3)
                            llm = OpenAI(model_name=selected_model, temperature=0.7, openai_api_key=openai_api_key)
                            memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
                            chain = load_qa_chain(llm=llm, chain_type="stuff", memory=memory)
                            response = chain.run(input_documents=docs, question=prompt)
                            st.markdown(response)
                        except Exception as e:
                            response = f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢, ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå: {e}"
                            st.error(response)
                    else:
                        try:
                            api_messages = [{"role": m["role"], "content": m["content"]} for m in st.session_state.messages]
                            # ‡πÄ‡∏û‡∏¥‡πà‡∏° system prompt
                            api_messages = [{"role": "system", "content": st.session_state.get("system_prompt", "")}] + api_messages
                            completion = openai.chat.completions.create(
                                model=selected_model,
                                messages=api_messages
                            )
                            response = completion.choices[0].message.content
                            st.markdown(response)
                        except Exception as e:
                            response = f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢, ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö OpenAI: {e}"
                            st.error(response)
                    st.session_state.messages.append({"role": "assistant", "content": response})
                    # Save chatlog to MongoDB (new schema)
                    user_id = openai_api_key  # ‡πÉ‡∏ä‡πâ OpenAI Key ‡πÄ‡∏õ‡πá‡∏ô user_id
                    chat_folder_id = st.session_state.get("chat_id", str(uuid.uuid4()))
                    chat_data = {
                        "question": prompt,
                        "answer": response,
                        "usage": completion.usage.to_dict() if 'completion' in locals() and hasattr(completion.usage, "to_dict") else None,
                        "timestamp": datetime.now(UTC).isoformat()
                    }
                    # upsert log ‡πÄ‡∏Ç‡πâ‡∏≤ chat_logs
                    chat_collection.update_one(
                        {"user_id": user_id, "chat_folder_id": chat_folder_id},
                        {
                            "$push": {"chats": chat_data},
                            "$set": {"last_update": datetime.now(UTC).isoformat()}
                        },
                        upsert=True
                    )
                    # update ‡∏´‡∏£‡∏∑‡∏≠ insert folder entry (refactored)
                    chat_folder_collection = mongo_client["chat_db"]["chat_folder"]
                    folder_doc = chat_folder_collection.find_one({"user_id": user_id})
                    folder_options = folder_doc.get("chat_folders", []) if folder_doc else []
                    folder_exists = any(f["chat_folder_id"] == chat_folder_id for f in folder_options)

                    if folder_exists:
                        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô folder ‡πÄ‡∏î‡∏¥‡∏°
                        chat_folder_collection.update_one(
                            {
                                "user_id": user_id,
                                "chat_folders.chat_folder_id": chat_folder_id
                            },
                            {
                                "$set": {
                                    "chat_folders.$.last_update": datetime.now(UTC).isoformat()
                                }
                            }
                        )
                    else:
                        # ‡πÄ‡∏û‡∏¥‡πà‡∏° folder ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
                        chat_folder_collection.update_one(
                            {"user_id": user_id},
                            {
                                "$push": {
                                    "chat_folders": {
                                        "chat_folder_id": chat_folder_id,
                                        "chat_name": st.session_state.get("chat_name", "New Chat"),
                                        "system_prompt": st.session_state.get("system_prompt", ""),
                                        "model": selected_model,
                                        "create_at": datetime.now(UTC).isoformat(),
                                        "last_update": datetime.now(UTC).isoformat()
                                    }
                                }
                            },
                            upsert=True
                        )
                    st.session_state.chat_id = chat_folder_id
else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÑ‡∏î‡πâ")
